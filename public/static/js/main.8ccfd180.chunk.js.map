{"version":3,"sources":["components/header/header.jsx","components/side-nav/sideNav.jsx","components/footer/footer.jsx","screens/homeScreen/home.jsx","screens/gameScreen/game.jsx","router/router.jsx","App.js","serviceWorker.js","index.js","colors.js"],"names":["header","className","style","backgroundColor","SideNav","currentScreen","setScreen","Color","SECONDARY","to","onClick","footer","home","COUNT","Game","state","selectedAns","question","countDownDate","result","startCount","interval","setInterval","clearInterval","sendAnswer","count","toString","length","setState","id","Math","floor","random","answer","answers","find","ans","title","setQuestion","console","log","match","color","this","map","key","border","Component","MyRouter","props","useState","BACKGROUND_LIGHT","path","Topics","useRouteMatch","url","Topic","topicId","useParams","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","PRIMARY","PRIMARY_LIGHT"],"mappings":"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","file":"static/js/main.8ccfd180.chunk.js","sourcesContent":["import React from 'react'\nimport './header.css'\n\nconst header = () => {\n    return (\n        <div className=\"header\" style={{ backgroundColor: '#fff' }}>\n            <div>\n                collapse\n                image\n                text\n            </div>\n            <div>\n                profile\n                drop-down\n            </div>\n        </div>\n    )\n}\nexport default header;","import React from 'react'\nimport './sideNav.css'\nimport Color from '../../colors'\n\nimport {\n    Link\n  } from \"react-router-dom\";\n\nexport default function SideNav({ currentScreen, setScreen }) {\n    return (\n        <div className=\"sideNav\" style={{ backgroundColor:Color.SECONDARY }}>\n            <ul>\n                <Link to=\"/\" onClick={() => setScreen('')}>\n                    <li className={ currentScreen ===''?'active':''}>Home</li>\n                </Link>\n                <Link to=\"/game\" onClick={() => setScreen('game')}>\n                    <li className={currentScreen==='game'?'active':''}>Game</li>\n                </Link>\n                <Link to=\"/topics\" onClick={() => setScreen('topics1')}>\n                    <li className={currentScreen==='topics1'?'active':''}>Test</li>\n                </Link>\n                <Link to=\"/topics\" onClick={() => setScreen('topics2')}>\n                    <li className={currentScreen==='topics2'?'active':''}>Test</li>\n                </Link>\n                <Link to=\"/topics\" onClick={() => setScreen('topics3')}>\n                    <li className={currentScreen==='topics3'?'active':''}>Test</li>\n                </Link>\n                \n            </ul>\n        </div>\n    )\n}","import React from 'react'\nimport './footer.css'\n\nconst footer = () => {\n    return (\n        <div className=\"footer\" style={{ backgroundColor:'#fff' }}>\n            footer\n        </div>\n    )\n}\nexport default footer;","import React from 'react'\n\nconst home = () => {\n    return (\n        <div>\n            home\n        </div>\n    )\n}\nexport default home;","import React, { Component } from 'react'\nimport './game.css'\n\n\nlet COUNT = 3;\n\nexport default class Game extends Component {\n    \n    \n    state = {\n        selectedAns: null,\n        question : null,\n        countDownDate: '03',\n        result: null\n    }\n    \n    startCount = ()=>{\n        const interval = setInterval(()=>{\n            COUNT = COUNT-1;\n            if(COUNT === 0){\n                clearInterval(interval)\n                this.sendAnswer()\n            }\n            const count = COUNT.toString().length===1?`0${COUNT}`:`${COUNT}`\n            this.setState({\n                countDownDate: count\n            })\n        },1000)\n    } \n    \n    sendAnswer = () => {\n        let id = Math.floor(Math.random()*2)\n        let answer = this.state.question.answers.find(ans => ans.id === id)\n        \n        if(answer.id===this.state.selectedAns?.id){\n            this.setState({\n                result: {\n                    title: 'Congradulations!!  You Won!!! :)'\n                }\n            })\n        }else{\n            this.setState({\n                result: {\n                    title: 'You Lost :(  Corrent Answer : '+answer.title\n                }\n            })\n        }\n        COUNT = 3;\n        this.setState({\n            countDownDate: '03'\n        })\n    }\n\n\n    setQuestion = () => {\n        console.log(this.match)\n        this.setState({\n            question: {\n                id: 1,\n                title: 'Predict the upcoming Color!!',\n                answers: [\n                    {\n                        id: 1,\n                        color: '#ff0000',\n                        title: 'Red'\n                    },\n                    {\n                        id: 2,\n                        color: '#00ff00',\n                        title: 'Green'\n                    },\n                    {\n                        id: 0,\n                        color: '#0000ff',\n                        title: 'Blue'\n                    }\n                ]\n            }\n        })\n        this.startCount();\n    }\n\n    render() {\n        const { selectedAns, countDownDate, question, result } = this.state;\n        if(question){\n            return (\n                <div className=\"question-container\">\n                    <div className=\"question\">\n                        <span>{question.title}</span>\n                        <span onClick={this.startCount}>{countDownDate}</span>\n                    </div>\n                    <div className=\"answer-container\">\n                        {\n                            question.answers.map(answer => (\n                                <span \n                                    key={answer.id} \n                                    className=\"answer\" \n                                    style={{ backgroundColor: selectedAns?.id===answer.id?answer.color:answer.color+'30', border: '1px solid '+answer.color}}\n                                    onClick={() => this.setState({ selectedAns:answer })}\n                                    >{answer.title}</span>\n                            ))\n                        }\n                    </div>\n\n                    {\n                        result===null\n                            ?<></>\n                            :<div>\n                                {result.title}\n                            </div>\n                                \n                    }\n                </div>\n            )\n        }else{\n            return (\n                <div className=\"question-container\">\n                    <div className=\"question\" onClick={this.setQuestion}>\n                        start\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n","import React, { useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\";\n\n//components\nimport SideNav from '../components/side-nav/sideNav';\nimport Color from '../colors'\nimport Footer from '../components/footer/footer'\n\n//screens\nimport HomeScreen from '../screens/homeScreen/home';\nimport GameScreen from '../screens/gameScreen/game';\n\nexport default function MyRouter(props) {\n    const [currentScreen, setScreen] = useState(null)\n\n  return (\n    <Router>\n        <div className=\"main\">\n            <SideNav currentScreen={currentScreen} setScreen={setScreen}/>\n            <div className=\"content-container\" style={{ backgroundColor:Color.BACKGROUND_LIGHT }}>\n                <div className=\"content\" style={{ backgroundColor:Color.BACKGROUND_LIGHT }}>\n                    <Switch>\n                        <Route path=\"/game\">\n                            <GameScreen />\n                        </Route>\n                        <Route path=\"/topics\">\n                            <Topics />\n                        </Route>\n                        <Route path=\"/\">\n                            <HomeScreen/>\n                        </Route>\n                    </Switch>\n                </div>\n                <Footer/>\n            </div>\n        </div>\n    </Router>\n  );\n}\n\n\n\nfunction Topics() {\n  let match = useRouteMatch();\n\n  return (\n    <div>\n      <h2>Topics</h2>\n\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>\n            Props v. State\n          </Link>\n        </li>\n      </ul>\n\n      {/* The Topics page has its own <Switch> with more routes\n          that build on the /topics URL path. You can think of the\n          2nd <Route> here as an \"index\" page for all topics, or\n          the page that is shown when no topic is selected */}\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic.</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n}","import React from 'react';\nimport './App.css';\n\nimport Header from './components/header/header'\nimport Router from \"./router/router\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Router/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nconst color = {\n    PRIMARY : '#018273',\n    PRIMARY_LIGHT : 'rgba(1, 130, 115, 0.08)',\n    // PRIMARY_DARK : '#112D32',\n    SECONDARY : '#3c4b64',\n    // SECONDARY_DARK : '#4f4a41',\n\n    BACKGROUND_LIGHT: '#f9fafc',\n}\n\nmodule.exports = color;\n"],"sourceRoot":""}